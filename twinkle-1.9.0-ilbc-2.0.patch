--- twinkle-1.9.0/cmake/FindIlbc.cmake.0002~	2015-07-13 21:14:07.000000000 +0200
+++ twinkle-1.9.0/cmake/FindIlbc.cmake	2016-05-13 03:08:02.759343216 +0200
@@ -1,4 +1,4 @@
-FIND_PATH(ILBC_INCLUDE_DIR ilbc/iLBC_decode.h)
+FIND_PATH(ILBC_INCLUDE_DIR ilbc.h)
 FIND_LIBRARY(ILBC_LIBRARIES NAMES ilbc)
 
 IF(ILBC_INCLUDE_DIR AND ILBC_LIBRARIES)
@@ -7,7 +7,7 @@ ENDIF(ILBC_INCLUDE_DIR AND ILBC_LIBRARIE
 
 IF(ILBC_FOUND)
 	IF (NOT Ilbc_FIND_QUIETLY)
-		MESSAGE(STATUS "Found ilbc includes:	${ILBC_INCLUDE_DIR}/ilbc/iLBC_decode.h")
+		MESSAGE(STATUS "Found ilbc includes:	${ILBC_INCLUDE_DIR}/ilbc.h")
 		MESSAGE(STATUS "Found ilbc library: ${ILBC_LIBRARIES}")
 	ENDIF (NOT Ilbc_FIND_QUIETLY)
 ELSE(ILBC_FOUND)
--- twinkle-1.9.0/src/audio/audio_decoder.cpp.0002~	2015-07-13 21:14:07.000000000 +0200
+++ twinkle-1.9.0/src/audio/audio_decoder.cpp	2016-05-13 03:08:02.759343216 +0200
@@ -25,7 +25,13 @@
 #ifndef HAVE_ILBC_CPP
 extern "C" {
 #endif
-#include <ilbc/iLBC_decode.h>
+#include <ilbc.h>
+#ifndef NO_OF_BYTES_20MS
+#define NO_OF_BYTES_20MS 38
+#define NO_OF_BYTES_30MS 50
+#define MIN_SAMPLE -32768
+#define MAX_SAMPLE 32767
+#endif
 #ifndef HAVE_ILBC_CPP
 }
 #endif
@@ -279,18 +285,18 @@ uint16 t_ilbc_audio_decoder::decode(uint
 		int16 *pcm_buf, uint16 pcm_buf_size)
 {
 	float sample;
-	float block[BLOCKL_MAX];
+	int16_t block[BLOCKL_MAX];
 	int block_len;
 	
 	if (get_ptime(payload_size) == 20) {
 		block_len = BLOCKL_20MS;
 		assert(pcm_buf_size >= block_len);
-		iLBC_decode(block, (unsigned char*)payload, &_ilbc_decoder_20, 1);
+		iLBC_decode(block, (uint16*)payload, &_ilbc_decoder_20, 1);
 		_last_received_ptime = 20;
 	} else {
 		block_len = BLOCKL_30MS;
 		assert(pcm_buf_size >= block_len);
-		iLBC_decode(block, (unsigned char*)payload, &_ilbc_decoder_30, 1);
+		iLBC_decode(block, (uint16*)payload, &_ilbc_decoder_30, 1);
 		_last_received_ptime = 30;
 	}
 	
@@ -307,8 +313,8 @@ uint16 t_ilbc_audio_decoder::decode(uint
 }
 
 uint16 t_ilbc_audio_decoder::conceal(int16 *pcm_buf, uint16 pcm_buf_size) {
-	float sample;
-	float block[BLOCKL_MAX];
+	int16 sample;
+	int16 block[BLOCKL_MAX];
 	int block_len;
 	
 	if (_last_received_ptime == 0) return 0;
--- twinkle-1.9.0/src/audio/audio_decoder.h.0002~	2015-07-13 21:14:07.000000000 +0200
+++ twinkle-1.9.0/src/audio/audio_decoder.h	2016-05-13 03:08:02.759343216 +0200
@@ -46,7 +46,7 @@ extern "C" {
 #ifndef HAVE_ILBC_CPP
 extern "C" {
 #endif
-#include <ilbc/iLBC_define.h>
+#include <ilbc.h>
 #ifndef HAVE_ILBC_CPP
 }
 #endif
--- twinkle-1.9.0/src/audio/audio_encoder.cpp.0002~	2015-07-13 21:14:07.000000000 +0200
+++ twinkle-1.9.0/src/audio/audio_encoder.cpp	2016-05-13 03:08:59.976995712 +0200
@@ -24,7 +24,11 @@
 #ifndef HAVE_ILBC_CPP
 extern "C" {
 #endif
-#include <ilbc/iLBC_encode.h>
+#include <ilbc.h>
+#ifndef NO_OF_BYTES_20MS
+#define NO_OF_BYTES_20MS 38
+#define NO_OF_BYTES_30MS 50
+#endif
 #ifndef HAVE_ILBC_CPP
 }
 #endif
@@ -264,13 +268,8 @@ uint16 t_ilbc_audio_encoder::encode(int1
 	assert(nsamples == _ilbc_encoder.blockl);
 	
 	silence = false;
-	float block[nsamples];
-	
-	for (int i = 0; i < nsamples; i++) {
-		block[i] = static_cast<float>(sample_buf[i]);
-	}
 	
-	iLBC_encode((unsigned char*)payload, block, &_ilbc_encoder);
+	iLBC_encode((uint16*)payload, sample_buf, &_ilbc_encoder);
 	
 	return _ilbc_encoder.no_of_bytes;
 }
--- twinkle-1.9.0/src/audio/audio_encoder.h.0002~	2015-07-13 21:14:07.000000000 +0200
+++ twinkle-1.9.0/src/audio/audio_encoder.h	2016-05-13 03:08:02.759343216 +0200
@@ -45,7 +45,7 @@ extern "C" {
 #ifndef HAVE_ILBC_CPP
 extern "C" {
 #endif
-#include <ilbc/iLBC_define.h>
+#include <ilbc.h>
 #ifndef HAVE_ILBC_CPP
 }
 #endif
